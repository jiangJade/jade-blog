(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{590:function(n,e,s){"use strict";s.r(e);var r=s(4),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"我们来看一下下面这两个代码有区别吗？以及为什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我们来看一下下面这两个代码有区别吗？以及为什么？"}},[n._v("#")]),n._v(" 我们来看一下下面这两个代码有区别吗？以及为什么？")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("import React from 'react';\n\nfunction MySon() {\n  console.log('child render!');\n  return <div>child</div>;\n}\n\nfunction CountComponent(props: any) {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <div>\n      <div onClick={() => { setCount(count + 1) }}>count:{count}</div>\n      <MySon />\n      \x3c!-- 重点 --\x3e\n      {props.children}\n    </div>\n  );\n}\n\n\nfunction App() {\n  return (\n    <CountComponent>\n      <MySon />\n    </CountComponent>\n  );\n}\n\nexport default App;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br")])]),s("p",[n._v("当点击count时 单独渲染"),s("MySon"),n._v("和 {props.children}的结果一样吗？")],1),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("答案是：                     不一样的 \n渲染<MySon />会打印出child render!\n渲染{props.children}不会打印child render!\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("what? 为什么不一样呢？")]),n._v(" "),s("p",[n._v("这就要说一下react render渲染机制了")]),n._v(" "),s("h2",{attrs:{id:"render需要满足的条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#render需要满足的条件"}},[n._v("#")]),n._v(" render需要满足的条件")]),n._v(" "),s("p",[n._v("React创建Fiber树时，每个组件对应的fiber都是通过如下两个逻辑之一创建的：\nrender。即调用render函数，根据返回的JSX创建新的fiber。\nbailout。即满足一定条件时，React判断该组件在更新前后没有发生变化，则复用该组件在上一次更新的fiber作为本次更新的fiber。\n可以看到，当命中bailout逻辑时，是不会调用render函数的。\n所以，MySon组件不会打印child render!是因为命中了bailout逻辑。")]),n._v(" "),s("h2",{attrs:{id:"bailout需要满足的条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bailout需要满足的条件"}},[n._v("#")]),n._v(" bailout需要满足的条件")]),n._v(" "),s("p",[n._v("什么情况下会进入bailout逻辑？当同时满足如下4个条件时：")]),n._v(" "),s("h3",{attrs:{id:"_1-oldprops-newprops-？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-oldprops-newprops-？"}},[n._v("#")]),n._v(" 1. oldProps === newProps ？")]),n._v(" "),s("p",[n._v("即本次更新的props（newProps）不等于上次更新的props（oldProps）。\n注意这里是全等比较。\n我们知道组件render会返回JSX，JSX是React.createElement的语法糖。\n所以render的返回结果实际上是React.createElement的执行结果，即一个包含props属性的对象。\n即使本次更新与上次更新props中每一项参数都没有变化，但是本次更新是React.createElement的执行结果，是一个全新的props引用，所以oldProps !== newProps。\n如果我们使用了PureComponent或Memo，那么在判断是进入render还是bailout时，不会判断oldProps与newProps是否全等，而是会对props内每个属性进行浅比较。")]),n._v(" "),s("h3",{attrs:{id:"_2-context没有变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-context没有变化"}},[n._v("#")]),n._v(" 2. context没有变化")]),n._v(" "),s("p",[n._v("即context的value没有变化。")]),n._v(" "),s("h3",{attrs:{id:"_3-workinprogress-type-current-type-？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-workinprogress-type-current-type-？"}},[n._v("#")]),n._v(" 3. workInProgress.type === current.type ？")]),n._v(" "),s("p",[n._v("更新前后fiber.type是否变化，比如div是否变为p。")]),n._v(" "),s("h3",{attrs:{id:"_4-includessomelane-renderlanes-updatelanes-？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-includessomelane-renderlanes-updatelanes-？"}},[n._v("#")]),n._v(" 4. !includesSomeLane(renderLanes, updateLanes) ？")]),n._v(" "),s("p",[n._v("当前fiber上是否存在更新，如果存在那么更新的优先级是否和本次整棵fiber树调度的优先级一致？\n如果一致则进入render逻辑。\n就我们的Demo来说，CountComponent是整棵树中唯一能触发更新的组件（通过调用setCount）。\n所以CountComponent对应的fiber是唯一满足条件4的fiber。")]),n._v(" "),s("h2",{attrs:{id:"敲黑板-划重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#敲黑板-划重点"}},[n._v("#")]),n._v(" 敲黑板 划重点")]),n._v(" "),s("p",[n._v("如果render返回的MySon是如下形式：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("<MySon />\n会编译为\nReact.createElement(MySon, null)\n执行后返回JSX。\n由于props的引用改变，oldProps !== newProps。会走render逻辑。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("但是在Demo中MySon如果是如下形式：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("{props.children}\n其中，props.children是MySon对应的JSX，而这里的props是App fiber走bailout逻辑后返回的。\n所以MySon对应的JSX与上次更新时一致，JSX中保存的props也就一致，满足条件1。\n可以看到，MySon满足bailout的所有条件，所以不会render。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);